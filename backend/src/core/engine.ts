// api/src/core/engine.ts - Motor de sincronizaci√≥n real-time para KATANA v7
// √öLTIMO CAMBIO: 2025-10-28 - Separado de networking.ts, ahora es motor de sincronizaci√≥n
// IMPORTANCIA: CR√çTICO - Gestiona el estado de la aplicaci√≥n y sincronizaci√≥n en tiempo real

import { WebSocket } from 'ws';
import { OpCode, encodeMessage } from '@shared/messages/ws';
import { getUserNotes, updateNote, deleteNote } from '../services/notes.js';
import { connections } from './networking.js';

// Cola de sincronizaci√≥n para procesar cambios
// √öLTIMO CAMBIO: 2025-10-28 - A√±adida cola para procesar cambios de forma ordenada
// IMPORTANCIA: ALTA - Evita race conditions y asegura orden de operaciones
interface SyncOperation {
  type: 'UPDATE' | 'DELETE';
  userId: string;
  noteId: string;
  data?: any;
  timestamp: number;
}

const syncQueue: SyncOperation[] = [];
let isProcessingQueue = false;

export class GameEngine {
  private gameLoopInterval: NodeJS.Timeout | null = null;
  private tickRate: number = 1000 / 30; // 30 ticks por segundo (suficiente para notas)

  constructor() {
    // El motor no necesita el servicio de notas directamente
    // Lo obtiene cuando lo necesita para evitar acoplamiento
  }

  // Inicia el motor de sincronizaci√≥n
  // √öLTIMO CAMBIO: 2025-10-28 - Implementado bucle de sincronizaci√≥n
  // IMPORTANCIA: CR√çTICO - Inicia el procesamiento de cambios y sincronizaci√≥n
  public start(): void {
    if (this.gameLoopInterval) {
      console.warn('‚ö†Ô∏è El motor de sincronizaci√≥n ya est√° en ejecuci√≥n');
      return;
    }

    console.log('üöÄ Iniciando motor de sincronizaci√≥n real-time');
    this.gameLoopInterval = setInterval(() => this.gameLoop(), this.tickRate);
  }

  // Detiene el motor de sincronizaci√≥n
  // √öLTIMO CAMBIO: 2025-10-28 - Implementada detenci√≥n limpia
  // IMPORTANCIA: ALTA - Detiene el procesamiento y libera recursos
  public stop(): void {
    if (!this.gameLoopInterval) {
      console.warn('‚ö†Ô∏è El motor de sincronizaci√≥n no est√° en ejecuci√≥n');
      return;
    }

    console.log('üõë Deteniendo motor de sincronizaci√≥n');
    clearInterval(this.gameLoopInterval);
    this.gameLoopInterval = null;
  }

  // Bucle principal del motor
  // √öLTIMO CAMBIO: 2025-10-28 - Implementado procesamiento de cola de sincronizaci√≥n
  // IMPORTANCIA: CR√çTICO - Procesa cambios pendientes y mantiene sincronizados los clientes
  private gameLoop(): void {
    // Procesar cola de sincronizaci√≥n
    if (!isProcessingQueue && syncQueue.length > 0) {
      this.processSyncQueue();
    }

    // Aqu√≠ podr√≠amos agregar:
    // - Detecci√≥n de cambios en la base de datos
    // - Limpieza de conexiones inactivas
    // - Estad√≠sticas de rendimiento
  }

  // Procesa la cola de sincronizaci√≥n
  // √öLTIMO CAMBIO: 2025-10-28 - Implementado procesamiento ordenado de cambios
  // IMPORTANCIA: ALTA - Asegura que los cambios se procesen en orden y sin conflictos
  private async processSyncQueue(): Promise<void> {
    if (isProcessingQueue) return;
    
    isProcessingQueue = true;
    
    try {
      while (syncQueue.length > 0) {
        const operation = syncQueue.shift();
        if (!operation) continue;

        await this.processSyncOperation(operation);
      }
    } catch (error) {
      console.error('‚ùå Error procesando cola de sincronizaci√≥n:', error);
    } finally {
      isProcessingQueue = false;
    }
  }

  // Procesa una operaci√≥n de sincronizaci√≥n individual
  // √öLTIMO CAMBIO: 2025-10-28 - Implementado procesamiento de operaciones
  // IMPORTANCIA: ALTA - Ejecuta la operaci√≥n y notifica a los clientes
  private async processSyncOperation(operation: SyncOperation): Promise<void> {
    const { type, userId, noteId, data } = operation;

    try {
      switch (type) {
        case 'UPDATE':
          await this.handleNoteUpdate(userId, noteId, data);
          break;
        case 'DELETE':
          await this.handleNoteDelete(userId, noteId);
          break;
      }
    } catch (error) {
      console.error(`‚ùå Error en operaci√≥n ${type} para nota ${noteId}:`, error);
    }
  }

  // Maneja la actualizaci√≥n de una nota
  // √öLTIMO CAMBIO: 2025-10-28 - Implementada actualizaci√≥n con broadcast
  // IMPORTANCIA: ALTA - Actualiza la nota y notifica a todos los clientes del usuario
  private async handleNoteUpdate(userId: string, noteId: string, data: any): Promise<void> {
    try {
      const updatedNote = await updateNote(noteId, userId, data);
      
      // Enviar actualizaci√≥n a todos los clientes del usuario
      const noteData = JSON.stringify(updatedNote);
      const buffer = Buffer.from(noteData);
      
      this.broadcastToUser(userId, OpCode.NOTE_UPDATE, buffer.buffer);
      console.log(`‚úÖ Nota ${noteId} actualizada y sincronizada`);
    } catch (error) {
      console.error('‚ùå Error actualizando nota:', error);
    }
  }

  // Maneja la eliminaci√≥n de una nota
  // √öLTIMO CAMBIO: 2025-10-28 - Implementada eliminaci√≥n con broadcast
  // IMPORTANCIA: ALTA - Elimina la nota y notifica a todos los clientes del usuario
  private async handleNoteDelete(userId: string, noteId: string): Promise<void> {
    try {
      const deleted = await deleteNote(noteId, userId);
      
      if (deleted) {
        const deleteData = JSON.stringify({ noteId });
        const buffer = Buffer.from(deleteData);
        
        this.broadcastToUser(userId, OpCode.NOTE_DELETE, buffer.buffer);
        console.log(`‚úÖ Nota ${noteId} eliminada y sincronizada`);
      }
    } catch (error) {
      console.error('‚ùå Error eliminando nota:', error);
    }
  }

  // Agrega una operaci√≥n a la cola de sincronizaci√≥n
  // √öLTIMO CAMBIO: 2025-10-28 - Implementada cola para operaciones as√≠ncronas
  // IMPORTANCIA: ALTA - Permite procesar operaciones de forma as√≠ncrona y ordenada
  public queueSyncOperation(operation: SyncOperation): void {
    syncQueue.push(operation);
    console.log(`üìù Operaci√≥n encolada: ${operation.type} para nota ${operation.noteId}`);
  }

  // Env√≠a un mensaje a todos los clientes de un usuario
  // √öLTIMO CAMBIO: 2025-10-28 - Implementado broadcast espec√≠fico por usuario
  // IMPORTANCIA: ALTA - Mantiene sincronizados todos los clientes del mismo usuario
  public broadcastToUser(userId: string, opCode: OpCode, data?: ArrayBuffer): void {
    const ws = connections.get(userId);
    
    if (ws && ws.readyState === WebSocket.OPEN) {
      const message = encodeMessage(opCode, data);
      ws.send(message);
    }
  }

  // Fuerza la recarga de notas para un usuario
  // √öLTIMO CAMBIO: 2025-10-28 - Implementada recarga forzada
  // IMPORTANCIA: MEDIA - √ötil para sincronizar despu√©s de cambios externos
  public async refreshUserNotes(userId: string): Promise<void> {
    try {
      const notes = await getUserNotes(userId);
      const notesData = JSON.stringify(notes);
      const buffer = Buffer.from(notesData);
      
      this.broadcastToUser(userId, OpCode.NOTE_LIST, buffer.buffer);
      console.log(`üîÑ Notas recargadas para usuario ${userId}`);
    } catch (error) {
      console.error('‚ùå Error recargando notas:', error);
    }
  }
}

// Instancia global del motor
// √öLTIMO CAMBIO: 2025-10-28 - Creada instancia global para acceso desde otros m√≥dulos
// IMPORTANCIA: ALTA - Permite que el motor sea accesible desde todo el backend
export const gameEngine = new GameEngine();